apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'

android {
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}


// Why is app module this not taking transitive dependencies?
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // TRANSITIVE NOT WORKING TODO
    // Firebase
    implementation 'com.google.firebase:firebase-config:19.1.3'
    api('com.google.firebase:firebase-core:17.3.0') {
        transitive = true
    }
    api("com.firebaseui:firebase-ui-database:$firebase_ui_version") {
        transitive = true
    }
    api("com.firebaseui:firebase-ui-firestore:$firebase_ui_version") {
        transitive = true
    }
    api("com.firebaseui:firebase-ui-storage:$firebase_ui_version") {
        transitive = true
    }
    api("com.firebaseui:firebase-ui-auth:$firebase_ui_version") {
        transitive = true
    }

    // Toasty library
    api('com.github.GrenderG:Toasty:1.4.2') {
        transitive = true
    }

    // Reactive Extensions
    api("io.reactivex.rxjava2:rxjava:2.2.19") {
        transitive = true
    }
    api('io.reactivex.rxjava2:rxkotlin:2.3.0') {
        transitive = true
    }
    api('io.reactivex.rxjava2:rxandroid:2.1.1') {
        transitive = true
    }

    // Retrofit and Moshi
    api('com.squareup.retrofit2:retrofit:2.8.1') {
        transitive = true
    }
    api('com.squareup.retrofit2:adapter-rxjava2:2.8.1') {
        transitive = true
    }
    api('com.squareup.moshi:moshi:1.9.2') {
        transitive = true
    }
    api('com.squareup.moshi:moshi-kotlin:1.9.2') {
        transitive = true
    }
    kapt("com.squareup.moshi:moshi-kotlin-codegen:1.9.2")

    // Imaging
    api('com.github.jkwiecien:EasyImage:3.0.3') {
        transitive = true
    }
    api('com.github.chrisbanes:PhotoView:2.3.0') {
        transitive = true
    }
    api('com.github.bumptech.glide:glide:4.9.0') {
        transitive = true
    }
    kapt 'com.github.bumptech.glide:compiler:4.9.0'

    // Files
    api('id.zelory:compressor:3.0.0') {
        transitive = true
    }

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"

    // (Java only)
    implementation "androidx.work:work-runtime:$work_version"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"
    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"
    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:$work_version"
}

repositories {
    mavenCentral()
}
