apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'org.jetbrains.dokka'

android {
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

//        This works but returns ethernet address. We need the wifi address
//        buildConfigField 'String', 'DEV_SERVER', "\"${InetAddress.localHost.hostAddress}\""
        buildConfigField 'String', 'DEV_SERVER', "\"192.168.0.70\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        dev {
//            buildConfigField "String", "DEV_IP", "192.168.0.70"
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}


// Why is app module this not taking transitive dependencies?
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Android KTX
    api("androidx.core:core-ktx:1.2.0") {
        transitive = true
    }
    api("androidx.fragment:fragment-ktx:1.2.4") {
        transitive = true
    }
    api("androidx.collection:collection-ktx:1.1.0") {
        transitive = true
    }
    api("androidx.room:room-ktx:2.2.5") {
        transitive = true
    }

    // ROOM
    kapt("androidx.room:room-compiler:$room_version") {
        transitive = true
    }
    api("androidx.room:room-runtime:$room_version") {
        transitive = true
    }
    api("androidx.room:room-rxjava2:$room_version") {
        transitive = true
    }


    // INEFFICIENT TRANSITIVE WORKING TODO
    // Firebase
    api('com.google.firebase:firebase-config:19.1.4') {
        transitive(true)
    }
    api('com.google.firebase:firebase-core:17.4.2') {
        transitive = true
    }
    api("com.firebaseui:firebase-ui-database:$firebase_ui_version") {
        transitive = true
    }
    api("com.firebaseui:firebase-ui-firestore:$firebase_ui_version") {
        transitive = true
    }
    api("com.firebaseui:firebase-ui-storage:$firebase_ui_version") {
        transitive = true
    }
    api("com.firebaseui:firebase-ui-auth:$firebase_ui_version") {
        transitive = true
    }

    // Toasty library
    api('com.github.GrenderG:Toasty:1.4.2') {
        transitive = true
    }

    // Reactive Extensions
    api("io.reactivex.rxjava2:rxjava:2.2.19") {
        transitive = true
    }
    api('io.reactivex.rxjava2:rxkotlin:2.3.0') {
        transitive = true
    }
    api('io.reactivex.rxjava2:rxandroid:2.1.1') {
        transitive = true
    }

    // Retrofit and Moshi
    api("io.crossbar.autobahn:autobahn-android:20.2.1") {
        transitive = true
    }
//    api("javax.websocket:javax.websocket-api:1.1") {
//        transitive = true
//    }
    api("com.squareup.okhttp3:okhttp:4.7.2") {
        transitive = true
    }
    api('com.squareup.retrofit2:retrofit:2.8.1') {
        transitive = true
    }
    api('com.squareup.retrofit2:adapter-rxjava2:2.8.1') {
        transitive = true
    }
    api('com.squareup.retrofit2:converter-moshi:2.8.1') {
        transitive(true)
    }
    api('com.squareup.moshi:moshi:1.9.2') {
        transitive = true
    }
    api('com.squareup.moshi:moshi-kotlin:1.9.2') {
        transitive = true
    }
    kapt("com.squareup.moshi:moshi-kotlin-codegen:1.9.2")

    // Imaging
    api('com.github.jkwiecien:EasyImage:3.0.3') {
        transitive = true
    }
    api('com.github.chrisbanes:PhotoView:2.3.0') {
        transitive = true
    }
    api('com.github.bumptech.glide:glide:4.9.0') {
        transitive = true
    }
    kapt('com.github.bumptech.glide:compiler:4.9.0') {
        transitive = true
    }

    // Files
    api('id.zelory:compressor:3.0.0') {
        transitive = true
    }

    // JetPack
    api("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version") {
        transitive = true
    }
    api("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version") {
        transitive = true
    }
    api("androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version") {
        transitive = true
    }
    api("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version") {
        transitive = true
    }
    api("androidx.work:work-runtime:$work_version") {
        transitive = true
    }

    // ToDo Remove dependency
    // Hack: https://stackoverflow.com/questions/56639529/duplicate-class-com-google-common-util-concurrent-listenablefuture-found-in-modu
    implementation 'com.google.guava:guava:27.0.1-android'
}

repositories {
    mavenCentral()
}
